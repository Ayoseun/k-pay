{"version":3,"file":"orokii.bundle.js","sources":["../src/scripts/script.js"],"sourcesContent":["\ndocument.querySelectorAll('.dropdown-header').forEach(header => {\n  header.addEventListener('click', function () {\n    const dropdown = this.parentElement;\n\n    // Close all other dropdowns\n    document.querySelectorAll('.dropdown').forEach(d => {\n      if (d !== dropdown) {\n        d.classList.remove('open');\n        d.querySelector('.dropdown-checkbox').checked = false;\n      }\n    });\n\n    // Toggle the clicked dropdown\n    dropdown.classList.toggle('open');\n    dropdown.querySelector('.dropdown-checkbox').checked = dropdown.classList.contains('open');\n  });\n});\n\n\n\n//Cards\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const cardNumberInput = document.getElementById('card-number');\n  const cardHolderNameInput = document.getElementById('cardholder-name')\n  const cvcInput = document.getElementById('cvc');\n  const cardLogo = document.getElementById('card-logo');\n  const expiryDateInput = document.getElementById('expiry-date');\n  const pinContainer = document.getElementById('pin-container')\n  const cardDetails = document.getElementById('card-details')\n  const summaryContainer = document.getElementById('summary-container')\n  const successContainer = document.getElementById('success-container')\n  const middleContainer = document.getElementById('middle-section')\n  const bottomContainer = document.getElementById('bottom-section')\n  const summaryConfirmBtn = document.getElementById('summary-buttons-confirm')\n  const summaryBackBtn = document.getElementById('summary-buttons-go-back')\n  const pinBackBtn = document.getElementById('pin-back')\n  const pinBtnContinue = document.getElementById('pin-continue')\n  // Format Expiry Date to MM/YY as user types\n  expiryDateInput.addEventListener('input', (e) => {\n      let value = e.target.value.replace(/\\D/g, ''); // Only allow digits\n\n      if (value.length >= 2) {\n          let month = value.slice(0, 2);\n\n          // Validate the month part (01-12)\n          if (parseInt(month, 10) > 12) {\n              month = '12'; // If invalid month, set it to 12\n          }\n          value = month + '/' + value.slice(2, 4); // Insert slash for MM/YY\n      }\n\n      e.target.value = value.slice(0, 5); // Max length: 5 (MM/YY)\n\n  });\n  // Function to update card logo based on card number\n  function updateCardLogo() {\n      const cardNumber = cardNumberInput.value.replace(/\\s+/g, '');\n      if (cardNumber.startsWith('4')) {\n          cardLogo.src = './assets/visa.svg'; // Visa\n      } else if (cardNumber.startsWith('5')) {\n          cardLogo.src = './assets/mastercard.svg'; // MasterCard\n      } else if (cardNumber.startsWith('6')) {\n          cardLogo.src = './assets/discover.svg'; // Discover\n      } else if (cardNumber.startsWith('3')) {\n          cardLogo.src = './assets/maestro.svg'; // Maestro\n      } else {\n          cardLogo.src = './assets/visa.svg'; // Default\n      }\n  }\n\n  // Add event listener to card number input\n  cardNumberInput.addEventListener('input', updateCardLogo);\n\n  // Restrict CVV input to exactly 3 digits\n  cvcInput.addEventListener('input', () => {\n      if (cvcInput.value.length > 3) {\n          cvcInput.value = cvcInput.value.slice(0, 3);\n      }\n  });\n\n  // Fetch and populate countries\n  fetch('https://restcountries.com/v3.1/all')\n      .then(response => response.json())\n      .then(data => {\n          console.log('Countries fetched:', data.length);\n          const countrySelect = document.getElementById('country');\n          countrySelect.innerHTML = '<option value=\"\">Select Country</option>';\n             // Sort the countries by their common names in ascending order\n      data.sort((a, b) => a.name.common.localeCompare(b.name.common));\n\n          data.forEach(country => {\n              const option = document.createElement('option');\n              option.value = country.name.common;\n              option.textContent = country.name.common;\n              countrySelect.appendChild(option);\n          });\n      })\n      .catch(error => console.error('Error fetching countries:', error));\n\n  // Fetch and populate states based on selected country\n  document.getElementById('country').addEventListener('change', (event) => {\n      const countryName = event.target.value;\n      console.log('Selected country:', countryName);\n\n      if (!countryName) {\n          console.log('No country selected, clearing state and city dropdowns');\n          document.getElementById('state').innerHTML = '<option value=\"\">Select State</option>';\n          document.getElementById('city').innerHTML = '<option value=\"\">Select City</option>';\n          return;\n      }\n\n      fetch('https://countriesnow.space/api/v0.1/countries/states', {\n          method: 'POST',\n          headers: {\n              'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({ country: countryName })\n      })\n          .then(response => {\n              console.log('State API response status:', response.status);\n              return response.json();\n          })\n          .then(data => {\n              console.log('State data received:', data);\n              const stateSelect = document.getElementById('state');\n              stateSelect.innerHTML = '<option value=\"\">Select State</option>';\n              if (data.data && data.data.states) {\n                  console.log('Number of states:', data.data.states.length);\n                  data.data.states.forEach(state => {\n                      const option = document.createElement('option');\n                      option.value = state.name;\n                      option.textContent = state.name;\n                      stateSelect.appendChild(option);\n                  });\n              } else {\n                  console.log('No states found in the response');\n              }\n              // Clear city dropdown when country changes\n              document.getElementById('city').innerHTML = '<option value=\"\">Select City</option>';\n          })\n          .catch(error => {\n              console.error('Error fetching states:', error);\n              alert('Error fetching states. Please check the console for details.');\n          });\n  });\n\n  // Fetch and populate cities based on selected state\n  document.getElementById('state').addEventListener('change', (event) => {\n      const countryName = document.getElementById('country').value;\n      const stateName = event.target.value;\n      console.log('Selected country for city fetch:', countryName);\n      console.log('Selected state for city fetch:', stateName);\n\n      if (!stateName) {\n          console.log('No state selected, clearing city dropdown');\n          document.getElementById('city').innerHTML = '<option value=\"\">Select City</option>';\n          return;\n      }\n\n      fetch('https://countriesnow.space/api/v0.1/countries/state/cities', {\n          method: 'POST',\n          headers: {\n              'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({ country: countryName, state: stateName })\n      })\n          .then(response => {\n              console.log('City API response status:', response.status);\n              return response.json();\n          })\n          .then(data => {\n              console.log('City data received:', data);\n              const citySelect = document.getElementById('city');\n              citySelect.innerHTML = '<option value=\"\">Select City</option>';\n              if (data.data) {\n                  console.log('Number of cities:', data.data.length);\n                  data.data.forEach(city => {\n                      const option = document.createElement('option');\n                      option.value = city;\n                      option.textContent = city;\n                      citySelect.appendChild(option);\n                  });\n              } else {\n                  console.log('No cities found in the response');\n              }\n          })\n          .catch(error => {\n              console.error('Error fetching cities:', error);\n              alert('Error fetching cities. Please check the console for details.');\n          });\n  });\n\n  summaryConfirmBtn.addEventListener('click', (event) => {\n      successContainer.style.display='flex';\n      middleContainer.style.display = 'none';\n      bottomContainer.style.display = 'none';\n  })\n  summaryBackBtn.addEventListener('click', (event) => {\n     summaryContainer.style.display='none';\n      cardDetails.style.display = 'block';\n  })\n    pinBtnContinue.addEventListener('click', (event) => {\n    pinContainer.style.display='none';\n     summaryContainer.style.display='block';\n     \n  })\n      pinBackBtn.addEventListener('click', (event) => {\n     pinContainer.style.display='none';\n      cardDetails.style.display = 'block';\n  })\n  // Function to get IP address\n  function getIpAddress() {\n      return fetch('https://api.ipify.org?format=json')\n          .then(response => response.json())\n          .then(data => data.ip)\n          .catch(() => '0.0.0.0'); // Default IP if unable to fetch\n  }\n\n  // Form submission\n  window.submitForm = async function () {\n\n      const expiryPattern = /^(0[1-9]|1[0-2])\\/(0[1-9]|[1-9][0-9])$/; // MM/YY format\n      const isValidExpiry = expiryPattern.test(expiryDateInput.value);\n\n      if (!isValidExpiry) {\n          alert('Invalid expiry date format. Use MM/YY.');\n          return;\n      }\n\n      const [month, year] = expiryDateInput.value.split('/');\n      const expiryMonth = parseInt(month, 10);\n      const expiryYear = parseInt(year, 10);\n\n      const currentDate = new Date();\n      const currentYear = currentDate.getFullYear() % 100; // Last two digits of the current year (YY format)\n      const currentMonth = currentDate.getMonth() + 1; // Current month (1-12)\n\n      // Check if the year is in the past\n      if (expiryYear < currentYear || (expiryYear === currentYear && expiryMonth < currentMonth)) {\n          alert('The expiry date must be later than the current date.');\n          return;\n      }\n\n      // Get the IP address\n      const ipAddress = await getIpAddress();\n\n      // Collect form data\n      const formData = {\n          amount: \"200\", // Fixed amount for example; adjust as needed\n          currency: \"USD\",\n          paymentOption: {\n              card: {\n                  cardNumber: cardNumberInput.value.replace(/\\s+/g, ''),\n                  cardHolderName: cardHolderNameInput.value,\n                  expirationMonth: month,\n                  expirationYear: `20${year}`, // Assuming the year is provided as YY\n                  CVV: cvcInput.value,\n                  threeD: {\n                      methodNotificationUrl: \"<methodNotificationURL>\" // Replace with actual URL\n                  }\n              }\n          },\n          deviceDetails: {\n              ipAddress: ipAddress // Use the fetched IP address\n          }\n      };\n      console.log(formData)\n      fetch('https://dumm.onrender.com/initiate-payment', {\n          method: 'POST',\n          headers: {\n              'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(formData)\n      })\n          .then(response => response.json())\n          .then(data => {\n              console.log('Payment initiated successfully', data);\n\n              if (data.status === \"SUCCESS\") {\n                  if (data.paymentOption.card.threeD.version !== null) {\n                      cardDetails.style.display = 'none';\n                      // document.getElementById('middle-section').style.display = 'none';\n                      // document.getElementById('bottom-section').style.display = 'none';\n                      pinContainer.style.display = 'flex';\n                  } else {\n                      cardDetails.style.display = 'none';\n                      // document.getElementById('middle-section').style.display = 'none';\n                      // document.getElementById('bottom-section').style.display = 'none';\n                      summaryContainer.style.display = 'block';\n                  }\n\n              } else {\n\n              }\n          })\n          .catch(error => {\n              console.error('Error:', error);\n              // Handle error (e.g., show an error message)\n          });\n  };\n\n\n});\n"],"names":["document","querySelectorAll","forEach","header","addEventListener","dropdown","this","parentElement","d","classList","remove","querySelector","checked","toggle","contains","cardNumberInput","getElementById","cardHolderNameInput","cvcInput","cardLogo","expiryDateInput","pinContainer","cardDetails","summaryContainer","successContainer","middleContainer","bottomContainer","summaryConfirmBtn","summaryBackBtn","pinBackBtn","pinBtnContinue","e","value","target","replace","length","month","slice","parseInt","cardNumber","startsWith","src","fetch","then","response","json","data","console","log","countrySelect","innerHTML","sort","a","b","name","common","localeCompare","country","option","createElement","textContent","appendChild","catch","error","event","countryName","method","headers","body","JSON","stringify","status","stateSelect","states","state","alert","stateName","citySelect","city","style","display","window","submitForm","async","test","year","split","expiryMonth","expiryYear","currentDate","Date","currentYear","getFullYear","currentMonth","getMonth","ipAddress","ip","formData","amount","currency","paymentOption","card","cardHolderName","expirationMonth","expirationYear","CVV","threeD","methodNotificationUrl","deviceDetails","version"],"mappings":"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"}